#include "ui/main_window.h"
#include "audiocensor/license_manager.h"
#include "audiocensor/config_manager.h"
#include "audiocensor/audio_processor.h"
#include "audiocensor/security.h"
#include "audiocensor/constants.h"
#include "ui/license_dialog.h"
#include "ui/obs_dialog.h"

#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QGroupBox>
#include <QFileDialog>
#include <QMessageBox>
#include <QStatusBar>
#include <QMenu>
#include <QMenuBar>
#include <QAction>
#include <QDateTime>
#include <QDesktopServices>
#include <QUrl>
#include <QTimer>
#include <QScrollBar> // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è QScrollBar
#include <QCloseEvent> // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è QCloseEvent

#include <nlohmann/json.hpp>
#include <curl/curl.h>

#include <iostream>
#include <fstream>
#include <chrono>
#include <random>

namespace audiocensor {

using json = nlohmann::json;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è callback cURL
static size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* output) {
    size_t realsize = size * nmemb;
    output->append(static_cast<char*>(contents), realsize);
    return realsize;
}

MainWindow::MainWindow(QWidget* parent)
    : QMainWindow(parent),
      running(false),
      input_device_index(-1),
      output_device_index(-1),
      detections_count(0)
{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    license_manager = std::make_unique<LicenseManager>();
    config_manager = std::make_unique<ConfigManager>();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    auto config = config_manager->get_config();
    audio_processor = std::make_unique<AudioProcessor>(config);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    setup_integration_menu();
    initialize_integrations();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
    setWindowTitle(QString::fromStdString(APPLICATION_NAME));
    setMinimumSize(APPLICATION_WIDTH, APPLICATION_HEIGHT);
    init_ui();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–µ–π
    setup_license_menu();

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    connect_signals();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
    init_audio();

    // –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status_timer = new QTimer(this);
    connect(status_timer, &QTimer::timeout, this, &MainWindow::update_status);
    status_timer->start(1000); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
    show_license_info();
}

MainWindow::~MainWindow() {
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (status_timer) {
        status_timer->stop();
        delete status_timer;
    }
}

void MainWindow::init_ui() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
    QWidget* central_widget = new QWidget(this);
    setCentralWidget(central_widget);

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
    QVBoxLayout* main_layout = new QVBoxLayout(central_widget);

    // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
    QHBoxLayout* license_button_layout = new QHBoxLayout();
    activate_license_button = new QPushButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", this);
    license_button_layout->addWidget(activate_license_button);
    license_button_layout->addStretch(1); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —Å–ª–µ–≤–∞
    main_layout->addLayout(license_button_layout);

    // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    QGroupBox* control_panel = new QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", this);
    QHBoxLayout* control_layout = new QHBoxLayout(control_panel);

    start_button = new QPushButton("–°—Ç–∞—Ä—Ç", this);
    stop_button = new QPushButton("–°—Ç–æ–ø", this);
    pause_button = new QPushButton("–ü–∞—É–∑–∞", this);

    stop_button->setEnabled(false);
    pause_button->setEnabled(false);

    control_layout->addWidget(start_button);
    control_layout->addWidget(pause_button);
    control_layout->addWidget(stop_button);

    main_layout->addWidget(control_panel);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
    QGroupBox* audio_panel = new QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ", this);
    QVBoxLayout* audio_layout = new QVBoxLayout(audio_panel);

    // –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    QHBoxLayout* device_layout = new QHBoxLayout();
    device_layout->addWidget(new QLabel("–í—Ö–æ–¥:", this));
    input_device_combo = new QComboBox(this);
    device_layout->addWidget(input_device_combo, 1);

    device_layout->addWidget(new QLabel("–í—ã—Ö–æ–¥:", this));
    output_device_combo = new QComboBox(this);
    device_layout->addWidget(output_device_combo, 1);

    audio_layout->addLayout(device_layout);

    main_layout->addWidget(audio_panel);

    // –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π
    QGroupBox* log_panel = new QGroupBox("–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π", this);
    QVBoxLayout* log_layout = new QVBoxLayout(log_panel);

    log_text = new QTextEdit(this);
    log_text->setReadOnly(true);
    log_layout->addWidget(log_text);

    QHBoxLayout* log_control_layout = new QHBoxLayout();
    clear_log_button = new QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", this);
    log_control_layout->addWidget(clear_log_button);

    save_log_button = new QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥", this);
    log_control_layout->addWidget(save_log_button);

    log_layout->addLayout(log_control_layout);

    main_layout->addWidget(log_panel);

    // –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    statusBar()->showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

    // –î–æ–±–∞–≤–∏–º –≤ —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
    buffer_label = new QLabel("–ë—É—Ñ–µ—Ä: 0/0", this);
    statusBar()->addPermanentWidget(buffer_label);

    detections_label = new QLabel("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: 0", this);
    statusBar()->addPermanentWidget(detections_label);
}

void MainWindow::connect_signals() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    connect(start_button, &QPushButton::clicked, this, &MainWindow::start_processing);
    connect(stop_button, &QPushButton::clicked, this, &MainWindow::stop_processing);
    connect(pause_button, &QPushButton::clicked, this, &MainWindow::toggle_pause);

    // –õ–æ–≥
    connect(clear_log_button, &QPushButton::clicked, this, &MainWindow::clear_log);
    connect(save_log_button, &QPushButton::clicked, this, &MainWindow::save_log);

    // –ö–Ω–æ–ø–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
    connect(activate_license_button, &QPushButton::clicked, this, &MainWindow::show_license_dialog);

    // –°–∏–≥–Ω–∞–ª—ã –æ—Ç –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    connect(audio_processor.get(), &AudioProcessor::logMessage, this, &MainWindow::add_log_message);
    connect(audio_processor.get(), &AudioProcessor::wordDetected, this, &MainWindow::word_detected);
    connect(audio_processor.get(), &AudioProcessor::bufferUpdate, this, &MainWindow::update_buffer_status);
    connect(audio_processor.get(), &AudioProcessor::deviceListUpdate, this, &MainWindow::update_device_list);
}

void MainWindow::setup_license_menu() {
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    QMenu* license_menu = menuBar()->addMenu("–õ–∏—Ü–µ–Ω–∑–∏—è");

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    QAction* activate_action = new QAction("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", this);
    connect(activate_action, &QAction::triggered, this, &MainWindow::show_license_dialog);
    license_menu->addAction(activate_action);

    QAction* info_action = new QAction("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏", this);
    connect(info_action, &QAction::triggered, this, [this]() { show_license_info(true); });
    license_menu->addAction(info_action);

    QAction* buy_action = new QAction("–ö—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é", this);
    connect(buy_action, &QAction::triggered, this, &MainWindow::buy_license);
    license_menu->addAction(buy_action);

    license_status_label = new QLabel("–õ–∏—Ü–µ–Ω–∑–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞...", this);
    statusBar()->addPermanentWidget(license_status_label);
}

void MainWindow::setup_integration_menu() {
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    QMenu* integration_menu = menuBar()->addMenu("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è");

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –¥–ª—è OBS
    QAction* obs_action = new QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OBS WebSocket", this);
    connect(obs_action, &QAction::triggered, this, &MainWindow::show_obs_config_dialog);
    integration_menu->addAction(obs_action);
}

void MainWindow::initialize_integrations() {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OBS
    obs_integration = std::make_unique<OBSIntegration>();
}

void MainWindow::init_audio() {
    if (audio_processor->initialize_audio()) {
        add_log_message("‚úÖ –ê—É–¥–∏–æ –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    } else {
        add_log_message("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã");
    }
}

void MainWindow::update_device_list(const QList<QPair<int, QString>>& devices) {
    input_device_combo->clear();
    output_device_combo->clear();

    for (const auto& device : devices) {
        int index = device.first;
        QString name = device.second;

        if (name.contains("(In)") || name.contains("(In/Out)")) {
            input_device_combo->addItem(name, index);
        }

        if (name.contains("(Out)") || name.contains("(In/Out)")) {
            output_device_combo->addItem(name, index);
        }
    }
}

void MainWindow::add_log_message(const QString& message) {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
    QString timestamp = QDateTime::currentDateTime().toString("hh:mm:ss");
    log_text->append(QString("[%1] %2").arg(timestamp).arg(message));

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞
    log_text->verticalScrollBar()->setValue(log_text->verticalScrollBar()->maximum());
}

void MainWindow::clear_log() {
    log_text->clear();
    add_log_message("üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω");
}

void MainWindow::save_log() {
    QString file_path = QFileDialog::getSaveFileName(
        this, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥", "", "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)");

    if (file_path.isEmpty()) {
        return;
    }

    try {
        QFile file(file_path);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream stream(&file);
            stream << log_text->toPlainText();
            file.close();

            add_log_message(QString("‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ %1").arg(file_path));
        } else {
            add_log_message(QString("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: %1").arg(file.errorString()));
        }
    } catch (const std::exception& e) {
        add_log_message(QString("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: %1").arg(e.what()));
    }
}

void MainWindow::start_processing() {
    if (running) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if (!license_manager->has_valid_license()) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏",
                            "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é.");
        show_license_dialog();
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ API
    add_log_message("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ API...");
    bool api_success = load_words_from_api();

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ API, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if (!api_success) {
        QMessageBox::critical(this, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                             "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞.\n"
                             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    input_device_index = input_device_combo->currentData().toInt();
    output_device_index = output_device_combo->currentData().toInt();

    if (input_device_index < 0 || output_device_index < 0) {
        add_log_message("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞");
        return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
    if (!audio_processor->setup_streams(input_device_index, output_device_index)) {
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
    audio_processor->start();
    running = true;

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    start_button->setEnabled(false);
    stop_button->setEnabled(true);
    pause_button->setEnabled(true);

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    input_device_combo->setEnabled(false);
    output_device_combo->setEnabled(false);

    add_log_message("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–∞");
}

void MainWindow::stop_processing() {
    if (!running) {
        return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
    audio_processor->stop_processing();
    running = false;

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    auto config = config_manager->get_config();
    config["target_words"] = "[]";
    config["target_patterns"] = "[]";
    config_manager->update_config(config);
    add_log_message("üßπ –°–ø–∏—Å–∫–∏ —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—á–∏—â–µ–Ω—ã");

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    audio_processor = std::make_unique<AudioProcessor>(config);

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    connect(audio_processor.get(), &AudioProcessor::logMessage, this, &MainWindow::add_log_message);
    connect(audio_processor.get(), &AudioProcessor::wordDetected, this, &MainWindow::word_detected);
    connect(audio_processor.get(), &AudioProcessor::bufferUpdate, this, &MainWindow::update_buffer_status);
    connect(audio_processor.get(), &AudioProcessor::deviceListUpdate, this, &MainWindow::update_device_list);

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    audio_processor->initialize_audio();

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    start_button->setEnabled(true);
    stop_button->setEnabled(false);
    pause_button->setEnabled(false);
    pause_button->setText("–ü–∞—É–∑–∞");

    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    input_device_combo->setEnabled(true);
    output_device_combo->setEnabled(true);

    add_log_message("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
}

void MainWindow::toggle_pause() {
    if (!running) {
        return;
    }

    if (audio_processor->is_paused()) {
        audio_processor->resume();
        pause_button->setText("–ü–∞—É–∑–∞");
        add_log_message("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    } else {
        audio_processor->pause();
        pause_button->setText("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å");
        add_log_message("‚è∏Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }
}

bool MainWindow::load_words_from_api() {
    try {
        // URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        std::string api_url = license_manager->get_words_api_url();

        // –ü–æ–ª—É—á–∞–µ–º machine_id
        std::string machine_id = security::get_machine_id();

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ç–∞–∫
        security::add_random_delay(50, 100); // 50-100 –º—Å

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_real_distribution<> dis(0, 1.0);
        std::string request_id = security::md5_hash(std::to_string(std::time(nullptr)) + std::to_string(dis(gen)));

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        std::string params = "machine_id=" + machine_id +
                           "&license_key=" + license_manager->get_license_key() +
                           "&request_id=" + request_id +
                           "&timestamp=" + std::to_string(std::time(nullptr));

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
        std::string full_url = api_url + "?" + params;

        // –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å
        CURL* curl = curl_easy_init();
        if (!curl) {
            add_log_message("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cURL");
            return false;
        }

        std::string response_data;

        curl_easy_setopt(curl, CURLOPT_URL, full_url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_data);
        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10L);

        CURLcode res = curl_easy_perform(curl);

        long http_code = 0;
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);

        curl_easy_cleanup(curl);

        if (res != CURLE_OK) {
            add_log_message(QString("‚ùå –û—à–∏–±–∫–∞ cURL: %1").arg(curl_easy_strerror(res)));
            return false;
        }

        if (http_code == 200) {
            // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            json data = json::parse(response_data);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏
            if (!license_manager->verify_api_response(response_data, machine_id)) {
                add_log_message("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API");
                return false;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            int words_count = 0;
            int patterns_count = 0;
            auto config = config_manager->get_config();

            if (data.contains("words") && data["words"].is_array()) {
                std::vector<std::string> target_words = data["words"].get<std::vector<std::string>>();
                config["target_words"] = data["words"].dump();
                words_count = target_words.size();
                add_log_message(QString("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ API").arg(words_count));
            } else {
                config["target_words"] = "[]";
                add_log_message("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            if (data.contains("patterns") && data["patterns"].is_array()) {
                std::vector<std::string> target_patterns = data["patterns"].get<std::vector<std::string>>();
                config["target_patterns"] = data["patterns"].dump();
                patterns_count = target_patterns.size();
                add_log_message(QString("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %1 —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏–∑ API").arg(patterns_count));
            } else {
                config["target_patterns"] = "[]";
                add_log_message("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —à–∞–±–ª–æ–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–µ
            audio_processor->update_config(config);
            add_log_message("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–Ω–∑—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_manager->update_config(config);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Å–ª–æ–≤–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω—ã
            if (words_count == 0 && patterns_count == 0) {
                add_log_message("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ —Å–ª–æ–≤, –Ω–∏ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ü–µ–Ω–∑—É—Ä—ã!");
                return false;
            }

            return true;
        } else {
            add_log_message(QString("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤: HTTP %1").arg(http_code));
            if (http_code == 401) {
                add_log_message("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ—Å—Ç—É–ø –∫ API");
            }
            return false;
        }

    } catch (const std::exception& e) {
        add_log_message(QString("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤: %1").arg(e.what()));
        return false;
    }
}

void MainWindow::update_status() {
    if (running) {
        QString status = "–ê–∫—Ç–∏–≤–Ω–æ";
        if (audio_processor->is_paused()) {
            status = "–ü–∞—É–∑–∞";
        }
        statusBar()->showMessage(QString("–°—Ç–∞—Ç—É—Å: %1").arg(status));
    } else {
        statusBar()->showMessage("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }
}

void MainWindow::word_detected(const QString& word, double start_time, double end_time) {
    detections_count++;
    detections_label->setText(QString("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: %1").arg(detections_count));
}

void MainWindow::update_buffer_status(int current, int maximum) {
    int percentage = (maximum > 0) ? (current * 100 / maximum) : 0;
    buffer_label->setText(QString("–ë—É—Ñ–µ—Ä: %1/%2 (%3%)").arg(current).arg(maximum).arg(percentage));
}

void MainWindow::show_license_dialog() {
    LicenseDialog dialog(license_manager.get(), this);
    if (dialog.exec() == QDialog::Accepted) {
        show_license_info();
    }
}

void MainWindow::show_license_info(bool show_dialog) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    auto license_status = license_manager->get_license_status();

    // –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
    std::unordered_map<int, std::string> months = {
        {1, "—è–Ω–≤–∞—Ä—è"}, {2, "—Ñ–µ–≤—Ä–∞–ª—è"}, {3, "–º–∞—Ä—Ç–∞"}, {4, "–∞–ø—Ä–µ–ª—è"},
        {5, "–º–∞—è"}, {6, "–∏—é–Ω—è"}, {7, "–∏—é–ª—è"}, {8, "–∞–≤–≥—É—Å—Ç–∞"},
        {9, "—Å–µ–Ω—Ç—è–±—Ä—è"}, {10, "–æ–∫—Ç—è–±—Ä—è"}, {11, "–Ω–æ—è–±—Ä—è"}, {12, "–¥–µ–∫–∞–±—Ä—è"}
    };

    QString status_text = "";

    if (license_status["has_license"] == "true") {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏
        try {
            std::tm expiry_tm = {};
            std::istringstream ss(license_status["expiry_date"]);
            ss >> std::get_time(&expiry_tm, "%Y-%m-%d");

            if (!ss.fail()) {
                int days_remaining = std::stoi(license_status["days_remaining"]);
                int month = expiry_tm.tm_mon + 1; // tm_mon is 0-based

                QString expiry_str = QString("%1 %2 %3 –≥–æ–¥–∞")
                                   .arg(expiry_tm.tm_mday)
                                   .arg(QString::fromStdString(months[month]))
                                   .arg(expiry_tm.tm_year + 1900);

                status_text = QString("–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: %1 (–æ—Å—Ç–∞–ª–æ—Å—å %2 –¥–Ω–µ–π)")
                            .arg(expiry_str)
                            .arg(days_remaining);

                license_status_label->setText(status_text);
                statusBar()->showMessage("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            } else {
                status_text = "–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞";
                license_status_label->setText(status_text);
                statusBar()->showMessage("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            }
        } catch (const std::exception& e) {
            status_text = "–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞";
            license_status_label->setText(status_text);
            statusBar()->showMessage("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
        }
    } else if (license_status["trial_active"] == "true") {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        try {
            std::tm expiry_tm = {};
            std::istringstream ss(license_status["expiry_date"]);
            ss >> std::get_time(&expiry_tm, "%Y-%m-%d");

            if (!ss.fail()) {
                int days_remaining = std::stoi(license_status["days_remaining"]);
                int month = expiry_tm.tm_mon + 1; // tm_mon is 0-based

                QString expiry_str = QString("%1 %2 %3 –≥–æ–¥–∞")
                                   .arg(expiry_tm.tm_mday)
                                   .arg(QString::fromStdString(months[month]))
                                   .arg(expiry_tm.tm_year + 1900);

                status_text = QString("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ: %1 (–æ—Å—Ç–∞–ª–æ—Å—å %2 –¥–Ω–µ–π)")
                            .arg(expiry_str)
                            .arg(days_remaining);

                license_status_label->setText(status_text);
                statusBar()->showMessage("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            } else {
                status_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω";
                license_status_label->setText(status_text);
                statusBar()->showMessage("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            }
        } catch (const std::exception& e) {
            status_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω";
            license_status_label->setText(status_text);
            statusBar()->showMessage("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
        }
    } else {
        // –ù–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏, –Ω–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        status_text = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏";
        license_status_label->setText(status_text);
        statusBar()->showMessage("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–ª–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞");
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (show_dialog) {
        LicenseInfoDialog dialog(license_manager.get(), this);
        dialog.exec();
    }
}

void MainWindow::buy_license() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram
    QDesktopServices::openUrl(
        QUrl(QString("https://t.me/%1").arg(
            QString::fromStdString(license_manager->get_telegram_contact()).replace("@", "")
        ))
    );
}

void MainWindow::show_obs_config_dialog() {
    OBSConfigDialog dialog(obs_integration.get(), this);
    dialog.exec();
}

bool MainWindow::check_license_on_launch() {
    auto license_status = license_manager->get_license_status();

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏, –Ω–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if (license_status["has_license"] != "true" && license_status["trial_active"] != "true") {
        LicenseDialog dialog(license_manager.get(), this);
        if (dialog.exec() != QDialog::Accepted) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            QTimer::singleShot(0, this, &MainWindow::close);
            return false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        show_license_info();
    }

    // –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    else if (license_status["has_license"] == "true") {
        int days_remaining = std::stoi(license_status["days_remaining"]);
        if (days_remaining > 0 && days_remaining <= 5) {
            QMessageBox::warning(this, "–°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—è",
                               QString("–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %1 –¥–Ω–µ–π.\n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à—É –ª–∏—Ü–µ–Ω–∑–∏—é.").arg(days_remaining));
        }
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    else if (license_status["trial_active"] == "true") {
        int days_remaining = std::stoi(license_status["days_remaining"]);
        if (days_remaining > 0 && days_remaining <= 1) {
            QMessageBox::warning(this, "–°–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                               QString("–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %1 –¥–Ω–µ–π.\n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.").arg(days_remaining));
        }
    }

    return true;
}
void MainWindow::closeEvent(QCloseEvent* event) {
    if (running) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        audio_processor->stop_processing();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    auto config = config_manager->get_config();
    config_manager->update_config(config);

    QMainWindow::closeEvent(event);
}

} // namespace audiocensor