} catch (const std::exception& e) {
        emit logMessage(QString("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤: %1").arg(e.what()));
        return false;
    }
}

std::vector<short> AudioProcessor::generate_beep(double duration) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∏–ø —Ç–∞–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫—ç—à–µ
    if (beep_cache.find(duration) != beep_cache.end()) {
        return beep_cache[duration];
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    int samples = static_cast<int>(current_sample_rate * duration);
    std::vector<short> beep_data(samples);
    
    double beep_frequency = std::stod(config.at("beep_frequency"));
    double beep_volume = 0.5; // –ì—Ä–æ–º–∫–æ—Å—Ç—å –±–∏–ø–∞ (0.0 - 1.0)
    
    for (int i = 0; i < samples; i++) {
        double t = static_cast<double>(i) / current_sample_rate;
        beep_data[i] = static_cast<short>(
            sin(2 * M_PI * beep_frequency * t) * 32767 * beep_volume
        );
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    beep_cache[duration] = beep_data;
    return beep_data;
}

void AudioProcessor::run() {
    running = true;
    program_start_time = std::chrono::duration_cast<std::chrono::milliseconds>(
        std::chrono::system_clock::now().time_since_epoch()
    ).count() / 1000.0;
    
    chunks_processed = 0;
    
    // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤
    {
        QMutexLocker locker(&buffer_lock);
        audio_buffer.clear();
        audio_buffer.resize(buffer_size_in_chunks * std::stoi(config.at("chunk_size")));
    }
    
    {
        QMutexLocker locker(&regions_lock);
        censored_regions.clear();
    }
    
    emit logMessage("üé§ –ó–∞–ø–∏—Å—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç—ã");
    double buffer_delay_sec = std::stod(config.at("buffer_delay"));
    emit logMessage(QString("üìä –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è: –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ %1 —Å–µ–∫—É–Ω–¥...").
                  arg(buffer_delay_sec, 0, 'f', 1));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º—ã
    Pa_StartStream(input_stream);
    Pa_StartStream(output_stream);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    int chunk_size = std::stoi(config.at("chunk_size"));
    std::vector<short> input_chunk(chunk_size);
    std::vector<short> output_chunk(chunk_size);
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    std::string audio_data_for_recognition;
    bool recognition_active = true;
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –±—É—Ñ–µ—Ä –Ω–∞–ø–æ–ª–Ω–∏—Ç—Å—è
    auto recording_start = std::chrono::system_clock::now();
    double buffer_delay = std::stod(config.at("buffer_delay"));
    
    while (std::chrono::duration<double>(std::chrono::system_clock::now() - recording_start).count() < buffer_delay && running) {
        if (!paused) {
            try {
                // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                Pa_ReadStream(input_stream, input_chunk.data(), chunk_size);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                {
                    QMutexLocker locker(&buffer_lock);
                    for (short sample : input_chunk) {
                        audio_buffer.push_back(sample);
                        if (audio_buffer.size() > buffer_size_in_chunks * chunk_size) {
                            audio_buffer.pop_front();
                        }
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Ñ–µ—Ä–µ –≤ UI
                emit bufferUpdate(static_cast<int>(audio_buffer.size()), 
                                buffer_size_in_chunks * chunk_size);
                
                // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                if (recognition_active && config.at("enable_censoring") == "true") {
                    // –ö–æ–ø–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    const char* input_data = reinterpret_cast<const char*>(input_chunk.data());
                    audio_data_for_recognition.append(input_data, chunk_size * sizeof(short));
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                    if (vosk_recognizer_accept_waveform(recognizer.get(), 
                                                      input_data, 
                                                      chunk_size * sizeof(short))) {
                        const char* result_json = vosk_recognizer_result(recognizer.get());
                        process_recognition_result(result_json);
                    }
                }
                
            } catch (const std::exception& e) {
                emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: %1").arg(e.what()));
            }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ CPU
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
    
    emit logMessage("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–æ");
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
    while (running) {
        if (!paused) {
            try {
                // –ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                Pa_ReadStream(input_stream, input_chunk.data(), chunk_size);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                {
                    QMutexLocker locker(&buffer_lock);
                    for (short sample : input_chunk) {
                        audio_buffer.push_back(sample);
                        if (audio_buffer.size() > buffer_size_in_chunks * chunk_size) {
                            audio_buffer.pop_front();
                        }
                    }
                }
                
                // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                if (recognition_active && config.at("enable_censoring") == "true") {
                    // –ö–æ–ø–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    const char* input_data = reinterpret_cast<const char*>(input_chunk.data());
                    audio_data_for_recognition.append(input_data, chunk_size * sizeof(short));
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    size_t max_recognition_bytes = current_sample_rate * sizeof(short) * 2; // ~2 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ
                    if (audio_data_for_recognition.size() > max_recognition_bytes) {
                        audio_data_for_recognition = audio_data_for_recognition.substr(
                            audio_data_for_recognition.size() - max_recognition_bytes
                        );
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                    if (vosk_recognizer_accept_waveform(recognizer.get(), 
                                                      input_data, 
                                                      chunk_size * sizeof(short))) {
                        const char* result_json = vosk_recognizer_result(recognizer.get());
                        process_recognition_result(result_json);
                    }
                }
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                std::fill(output_chunk.begin(), output_chunk.end(), 0); // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞–Ω–∫ –∏–∑ –±—É—Ñ–µ—Ä–∞
                size_t samples_available;
                {
                    QMutexLocker locker(&buffer_lock);
                    samples_available = audio_buffer.size();
                    
                    if (samples_available >= chunk_size) {
                        for (int i = 0; i < chunk_size; i++) {
                            if (!audio_buffer.empty()) {
                                output_chunk[i] = audio_buffer.front();
                                audio_buffer.pop_front();
                            }
                        }
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                        continue;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ü–µ–Ω–∑—É—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞–Ω–∫
                if (config.at("enable_censoring") == "true") {
                    QMutexLocker locker(&regions_lock);
                    for (size_t i = 0; i < censored_regions.size(); i++) {
                        auto& region = censored_regions[i];
                        int start_idx = std::get<0>(region);
                        int end_idx = std::get<1>(region);
                        bool processed = std::get<2>(region);
                        
                        if (start_idx <= chunks_processed && chunks_processed <= end_idx) {
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω–∑—É—Ä—É - –∑–∞–º–µ–Ω—è–µ–º —á–∞–Ω–∫ –Ω–∞ —Ç–∏—à–∏–Ω—É –∏–ª–∏ –±–∏–ø
                            std::fill(output_chunk.begin(), output_chunk.end(), 0);
                            emit censorApplied(chunks_processed, start_idx, end_idx);
                            
                            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                            if (chunks_processed == end_idx) {
                                std::get<2>(region) = true;
                            }
                        }
                    }
                    
                    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                    censored_regions.erase(
                        std::remove_if(censored_regions.begin(), censored_regions.end(), 
                                      [](const auto& r) { return std::get<2>(r); }),
                        censored_regions.end()
                    );
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
                Pa_WriteStream(output_stream, output_chunk.data(), chunk_size);
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                chunks_processed++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Ñ–µ—Ä–µ –≤ UI
                emit bufferUpdate(static_cast<int>(audio_buffer.size()), 
                                buffer_size_in_chunks * chunk_size);
                
            } catch (const std::exception& e) {
                emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: %1").arg(e.what()));
            }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ CPU
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    cleanup_resources();
    emit logMessage("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}

void AudioProcessor::process_recognition_result(const std::string& result_json) {
    try {
        // –ü–∞—Ä—Å–∏–º JSON
        json result = json::parse(result_json);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (!result.contains("result") || !result["result"].is_array()) {
            return;
        }
        
        auto words = result["result"];
        if (words.empty()) {
            return;
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (config.at("debug_mode") == "true") {
            QStringList all_words;
            for (const auto& word : words) {
                all_words.append(QString::fromStdString(word["word"].get<std::string>()).toLower());
            }
            emit logMessage(QString("üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: %1").arg(all_words.join(", ")));
        }
        
        // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        double elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(
            std::chrono::system_clock::now().time_since_epoch()
        ).count() / 1000.0 - program_start_time;
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ª–æ–≤
        WordDetector detector(std::unordered_map<std::string, std::string>());
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ü–µ–ª–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        std::vector<std::string> target_patterns;
        std::vector<std::string> target_words;
        
        // –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        if (config.find("target_patterns") != config.end()) {
            try {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Å—Å–∏–≤–æ–º
                target_patterns = json::parse(config.at("target_patterns")).get<std::vector<std::string>>();
            } catch (...) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
                std::istringstream iss(config.at("target_patterns"));
                std::string pattern;
                while (std::getline(iss, pattern, ',')) {
                    if (!pattern.empty()) {
                        target_patterns.push_back(pattern);
                    }
                }
            }
        }
        
        // –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if (config.find("target_words") != config.end()) {
            try {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Å—Å–∏–≤–æ–º
                target_words = json::parse(config.at("target_words")).get<std::vector<std::string>>();
            } catch (...) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
                std::istringstream iss(config.at("target_words"));
                std::string word;
                while (std::getline(iss, word, ',')) {
                    if (!word.empty()) {
                        target_words.push_back(word);
                    }
                }
            }
        }
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —á–∞–Ω–∫–æ–≤
        int chunk_size = std::stoi(config.at("chunk_size"));
        double buffer_delay = std::stod(config.at("buffer_delay"));
        int safety_margin = std::stoi(config.at("safety_margin"));
        double chunks_per_second = static_cast<double>(current_sample_rate) / chunk_size;
        
        for (const auto& word : words) {
            std::string word_text = word["word"].get<std::string>();
            std::transform(word_text.begin(), word_text.end(), word_text.begin(),
                         [](unsigned char c){ return std::tolower(c); });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º
            bool is_prohibited;
            std::string matched_pattern;
            std::tie(is_prohibited, matched_pattern) = detector.is_prohibited_word(word_text, 
                                                                               target_patterns, 
                                                                               target_words);
            
            if (is_prohibited) {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞
                double start_time = word["start"].get<double>();
                double end_time = word["end"].get<double>();
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ü–µ–Ω–∑—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                int chunks_offset_start = static_cast<int>((start_time - (elapsed_time - buffer_delay)) *
                                                      chunks_per_second) - safety_margin;
                int chunks_offset_end = static_cast<int>((end_time - (elapsed_time - buffer_delay)) *
                                                    chunks_per_second) + safety_margin;
                
                // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ü–µ–Ω–∑—É—Ä—ã
                int censored_chunk_start = chunks_processed + chunks_offset_start;
                int censored_chunk_end = chunks_processed + chunks_offset_end;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ü–µ–Ω–∑—É—Ä—ã
                {
                    QMutexLocker locker(&regions_lock);
                    censored_regions.push_back(std::make_tuple(censored_chunk_start, censored_chunk_end, false));
                }
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ–≤–µ
                emit wordDetected(QString::fromStdString(word_text), start_time, end_time);
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                QString log_message = QString("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞: \"%1\"\n")
                                    .arg(QString::fromStdString(word_text));
                
                log_message += QString("   –í—Ä–µ–º—è: %1—Å - %2—Å (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %3—Å)\n")
                            .arg(start_time, 0, 'f', 2)
                            .arg(end_time, 0, 'f', 2)
                            .arg(end_time - start_time, 0, 'f', 2);
                
                emit logMessage(log_message);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if (config.at("log_to_file") == "true") {
                    try {
                        std::ofstream log_file(config.at("log_file"), std::ios::app);
                        if (log_file.is_open()) {
                            auto now = std::chrono::system_clock::now();
                            auto now_time_t = std::chrono::system_clock::to_time_t(now);
                            std::tm now_tm = *std::localtime(&now_time_t);
                            
                            char timestamp[20];
                            std::strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", &now_tm);
                            
                            log_file << timestamp << " - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: \"" << word_text << "\" "
                                    << (matched_pattern.empty() ? "" : "(—à–∞–±–ª–æ–Ω: " + matched_pattern + ") ")
                                    << "(–≤—Ä–µ–º—è: " << start_time << "—Å-" << end_time << "—Å)" << std::endl;
                            
                            log_file.close();
                        }
                    } catch (const std::exception& e) {
                        emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: %1").arg(e.what()));
                    }
                }
            }
        }
        
    } catch (const json::parse_error& e) {
        emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: %1").arg(e.what()));
    } catch (const std::exception& e) {
        emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: %1").arg(e.what()));
    }
}

void AudioProcessor::update_config(const std::unordered_map<std::string, std::string>& new_config) {
    config = new_config;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    buffer_size_in_chunks = static_cast<int>(std::stod(config.at("buffer_delay")) * current_sample_rate / 
                                          std::stoi(config.at("chunk_size"))) + 2;
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –±–∏–ø–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã –∏–ª–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    beep_cache.clear();
}

void AudioProcessor::pause() {
    paused = true;
}

void AudioProcessor::resume() {
    paused = false;
}

void AudioProcessor::stop_processing() {
    running = false;
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    wait(1000); // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    cleanup_resources();
}

void AudioProcessor::cleanup_resources() {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    try {
        if (input_stream) {
            Pa_StopStream(input_stream);
            Pa_CloseStream(input_stream);
            input_stream = nullptr;
        }
    } catch (const std::exception& e) {
        emit logMessage(QString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ç–æ–∫–∞ –≤–≤–æ–¥–∞: %1").arg(e.what()));
    }
    
    try {
        if (output_stream) {
            Pa_StopStream(output_stream);
            Pa_CloseStream(output_stream);
            output_stream = nullptr;
        }
    } catch (const std::exception& e) {
        emit logMessage(QString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ç–æ–∫–∞ –≤—ã–≤–æ–¥–∞: %1").arg(e.what()));
    }
    
    try {
        Pa_Terminate();
    } catch (const std::exception& e) {
        emit logMessage(QString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ PortAudio: %1").arg(e.what()));
    }
    
    // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
    {
        QMutexLocker locker(&buffer_lock);
        audio_buffer.clear();
    }
    
    {
        QMutexLocker locker(&regions_lock);
        censored_regions.clear();
    }
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –±–∏–ø–æ–≤
    beep_cache.clear();
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –∏ –º–æ–¥–µ–ª—å
    recognizer.reset();
    model.reset();
    
    emit logMessage("‚úÖ –†–µ—Å—É—Ä—Å—ã –∞—É–¥–∏–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã");
}#include "audiocensor/audio_processor.h"
#include "audiocensor/word_detector.h"
#include "audiocensor/constants.h"

#include <QDebug>
#include <QMutexLocker>
#include <QDateTime>

#include <portaudio.h>
#include <vosk_api.h>
#include <nlohmann/json.hpp>

#include <chrono>
#include <thread>
#include <cmath>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <functional>

namespace audiocensor {

using json = nlohmann::json;

// Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
static int inputCallback(const void* inputBuffer, void* outputBuffer,
                         unsigned long framesPerBuffer,
                         const PaStreamCallbackTimeInfo* timeInfo,
                         PaStreamCallbackFlags statusFlags,
                         void* userData) {
    // –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏,
    // –∞ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–æ—Ç–æ–∫–∞
    return paContinue;
}

// Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã—Ö–æ–¥
static int outputCallback(const void* inputBuffer, void* outputBuffer,
                          unsigned long framesPerBuffer,
                          const PaStreamCallbackTimeInfo* timeInfo,
                          PaStreamCallbackFlags statusFlags,
                          void* userData) {
    // –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏,
    // –∞ –ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ—Ç–æ–∫
    return paContinue;
}

AudioProcessor::AudioProcessor(const std::unordered_map<std::string, std::string>& config, QObject* parent)
    : QThread(parent), config(config), running(false), paused(false),
      audio(nullptr), input_stream(nullptr), output_stream(nullptr),
      model(nullptr), recognizer(nullptr),
      current_sample_rate(DEFAULT_SAMPLE_RATE), current_channels(1),
      buffer_size_in_chunks(0), program_start_time(0), chunks_processed(0),
      input_device_index(-1), output_device_index(-1) {
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞
    buffer_size_in_chunks = static_cast<int>(
        std::stod(config.at("buffer_delay")) * DEFAULT_SAMPLE_RATE / DEFAULT_CHUNK_SIZE) + 2;
    audio_buffer.resize(buffer_size_in_chunks * DEFAULT_CHUNK_SIZE);
}

AudioProcessor::~AudioProcessor() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    if (running) {
        stop_processing();
    }
}

bool AudioProcessor::initialize_audio() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PortAudio
        PaError err = Pa_Initialize();
        if (err != paNoError) {
            emit logMessage(QString("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PortAudio: %1").
                          arg(Pa_GetErrorText(err)));
            return false;
        }
        
        audio = nullptr; // PortAudio –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pa_ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
        emit logMessage("‚úÖ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö
        QList<QPair<int, QString>> devices_info;
        
        int numDevices = Pa_GetDeviceCount();
        if (numDevices < 0) {
            emit logMessage(QString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %1").
                          arg(Pa_GetErrorText(numDevices)));
            return false;
        }
        
        for (int i = 0; i < numDevices; i++) {
            const PaDeviceInfo* deviceInfo = Pa_GetDeviceInfo(i);
            if (!deviceInfo) continue;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤–≤–æ–¥ –∏–ª–∏ –≤—ã–≤–æ–¥
            if (deviceInfo->maxInputChannels > 0 || deviceInfo->maxOutputChannels > 0) {
                QString name = QString("%1").arg(deviceInfo->name);
                if (deviceInfo->maxInputChannels > 0 && deviceInfo->maxOutputChannels > 0) {
                    name += " (In/Out)";
                } else if (deviceInfo->maxInputChannels > 0) {
                    name += " (In)";
                } else {
                    name += " (Out)";
                }
                
                devices_info.append(QPair<int, QString>(i, name));
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                QString device_log = QString("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ [%1]: %2").arg(i).arg(deviceInfo->name);
                device_log += QString("\n   –ö–∞–Ω–∞–ª—ã: –í—Ö–æ–¥ %1, –í—ã—Ö–æ–¥ %2").
                            arg(deviceInfo->maxInputChannels).
                            arg(deviceInfo->maxOutputChannels);
                device_log += QString("\n   –ß–∞—Å—Ç–æ—Ç–∞: %1 –ì—Ü").arg(deviceInfo->defaultSampleRate);
                emit logMessage(device_log);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ UI
        emit deviceListUpdate(devices_info);
        emit logMessage(QString("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %1 –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤").arg(devices_info.size()));
        return true;
        
    } catch (const std::exception& e) {
        emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: %1").arg(e.what()));
        return false;
    }
}

bool AudioProcessor::setup_streams(int input_index, int output_index) {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        input_device_index = input_index;
        output_device_index = output_index;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        int numDevices = Pa_GetDeviceCount();
        if (input_index >= numDevices || output_index >= numDevices) {
            emit logMessage(QString("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –≤—Ö–æ–¥=%1, –≤—ã—Ö–æ–¥=%2").
                          arg(input_index).arg(output_index));
            return false;
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (input_stream) {
            try {
                Pa_StopStream(input_stream);
                Pa_CloseStream(input_stream);
                input_stream = nullptr;
            } catch (const std::exception& e) {
                emit logMessage(QString("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫: %1").arg(e.what()));
            }
        }
        
        if (output_stream) {
            try {
                Pa_StopStream(output_stream);
                Pa_CloseStream(output_stream);
                output_stream = nullptr;
            } catch (const std::exception& e) {
                emit logMessage(QString("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫: %1").arg(e.what()));
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        const PaDeviceInfo* input_device_info = Pa_GetDeviceInfo(input_index);
        const PaDeviceInfo* output_device_info = Pa_GetDeviceInfo(output_index);
        
        if (!input_device_info || !output_device_info) {
            emit logMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        if (input_device_info->maxInputChannels <= 0) {
            emit logMessage("‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥");
            return false;
        }
        
        if (output_device_info->maxOutputChannels <= 0) {
            emit logMessage("‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥");
            return false;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        int input_rate = static_cast<int>(input_device_info->defaultSampleRate);
        int output_rate = static_cast<int>(output_device_info->defaultSampleRate);
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π
        std::vector<int> standard_rates = {8000, 16000, 22050, 32000, 44100, 48000};
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        if (input_rate == output_rate) {
            current_sample_rate = input_rate;
            emit logMessage(QString("üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É %1 –ì—Ü").arg(input_rate));
        } else {
            // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª—å—à—É—é –æ–±—â—É—é —á–∞—Å—Ç–æ—Ç—É
            std::vector<int> common_rates;
            for (int rate : standard_rates) {
                if (rate <= std::min(input_rate, output_rate)) {
                    common_rates.push_back(rate);
                }
            }
            
            if (!common_rates.empty()) {
                current_sample_rate = *std::max_element(common_rates.begin(), common_rates.end());
                emit logMessage(QString("üìä –í—ã–±—Ä–∞–Ω–∞ –æ–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞ %1 –ì—Ü").arg(current_sample_rate));
            } else {
                // –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 16000 –ì—Ü
                current_sample_rate = 16000;
                emit logMessage(QString("üìä –í—ã–±—Ä–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ %1 –ì—Ü").arg(current_sample_rate));
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        current_channels = 1;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        try {
            model = std::shared_ptr<VoskModel>(vosk_model_new(config.at("model_path").c_str()),
                                              vosk_model_free);
            if (!model) {
                emit logMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ Vosk");
                return false;
            }
            
            recognizer = std::shared_ptr<VoskRecognizer>(
                vosk_recognizer_new(model.get(), current_sample_rate),
                vosk_recognizer_free
            );
            if (!recognizer) {
                emit logMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è Vosk");
                return false;
            }
            
            vosk_recognizer_set_words(recognizer.get(), 1);
            
        } catch (const std::exception& e) {
            emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è: %1").arg(e.what()));
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        buffer_size_in_chunks = static_cast<int>(std::stod(config.at("buffer_delay")) * current_sample_rate / 
                                              std::stoi(config.at("chunk_size"))) + 2;
        
        // –û—á–∏—â–∞–µ–º –∏ —Ä–µ—Å–∞–π–∑–∏–º –±—É—Ñ–µ—Ä
        audio_buffer.clear();
        audio_buffer.resize(buffer_size_in_chunks * std::stoi(config.at("chunk_size")));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        QVariantMap device_config;
        device_config["sample_rate"] = current_sample_rate;
        device_config["channels"] = current_channels;
        device_config["input_device"] = input_device_info->name;
        device_config["output_device"] = output_device_info->name;
        device_config["buffer_size"] = buffer_size_in_chunks;
        emit deviceInfoUpdate(device_config);
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        PaStreamParameters inputParameters;
        inputParameters.device = input_index;
        inputParameters.channelCount = current_channels;
        inputParameters.sampleFormat = paInt16;
        inputParameters.suggestedLatency = input_device_info->defaultLowInputLatency;
        inputParameters.hostApiSpecificStreamInfo = nullptr;
        
        PaError err = Pa_OpenStream(&input_stream, &inputParameters, nullptr,
                                   current_sample_rate, std::stoi(config.at("chunk_size")),
                                   paNoFlag, nullptr, nullptr);
        
        if (err != paNoError) {
            emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: %1").arg(Pa_GetErrorText(err)));
            return false;
        }
        
        emit logMessage(QString("‚úÖ –í—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %1)").arg(input_index));
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        PaStreamParameters outputParameters;
        outputParameters.device = output_index;
        outputParameters.channelCount = current_channels;
        outputParameters.sampleFormat = paInt16;
        outputParameters.suggestedLatency = output_device_info->defaultLowOutputLatency;
        outputParameters.hostApiSpecificStreamInfo = nullptr;
        
        err = Pa_OpenStream(&output_stream, nullptr, &outputParameters,
                           current_sample_rate, std::stoi(config.at("chunk_size")),
                           paNoFlag, nullptr, nullptr);
        
        if (err != paNoError) {
            emit logMessage(QString("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: %1").arg(Pa_GetErrorText(err)));
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å
            if (input_stream) {
                Pa_CloseStream(input_stream);
                input_stream = nullptr;
            }
            
            return false;
        }
        
        emit logMessage(QString("‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %1)").arg(output_index));
        emit logMessage(QString("‚úÖ –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–≤—Ö–æ–¥: %1, –≤—ã—Ö–æ–¥: %2)").
                      arg(input_index).arg(output_index));
        emit logMessage(QString("üìä –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: %1 –ì—Ü, –ö–∞–Ω–∞–ª–æ–≤: %2").
                      arg(current_sample_rate).arg(current_channels));
        
        return true;
        
    } catch (const std::exception& e) {
        emit logMessage(QString("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤: %1").arg(e.what()));
        return false;
    }
}